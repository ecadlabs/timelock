package timelock

import (
	"crypto/rand"
	"testing"

	tz "github.com/ecadlabs/gotez/v2"
	"github.com/ecadlabs/gotez/v2/encoding"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

type testVec struct {
	time          int
	lockedValue   string
	unlockedValue string
	vdfProof      string
	chest         []byte
	chestKey      []byte
	payload       []byte
}

var vectors = []testVec{
	{
		time:          1000,
		lockedValue:   "2392904408470554760978250157158565090653637952136762921161516100509051391049416831457462039932478640291652726351080198671859996140057339372380086535932400522958974310026438424102153990384089784500653318477293530420962843692218892918988205538426381343721312110433044911192744107280690893836339960802523237242109451591185561929544955070103238361377069046942990731495583419847302422591133819009495854067369923583339851832790544852946059231130220372498428526776543884005067088796386197792313123561410301169124358027932110230067066409155285281742333049171462004625241119322045521575481655311353929124539622186101076748864",
		unlockedValue: "2620972056309502203350073650286301739478009901639656349428468442971368260860477920384801161519151141389207879000892630445006989547563981436487162339355921946227902313634922964215766663403683793609398070897667988504581607415039042627366320254931453779573188223657161830442999359840625214212642535766265507463635541531567265680913752408808425465277792763747892692935124714495179890358018114052290444465906147090900820680419938650632928673837841665922987908733196112708220574557164138684507614494552362771514352185377561360506882371267250444601184913675624217636022274571032731821624141565427113520961050261027701688579",
		vdfProof:      "17564152955066873573078931876493836375713147141819560696099981987732703425301624756504144477263265055448296370066610053953664521505535116779715535774901492163469089418127511595654002366955659454781408285380869060985209048734331958859280218887187813830308319969150202876601909280741396658356471150494649070974594793369873095513104056582373661221026608714012658841380635106791509386405115117913742298627838781577718351301131533095762448398059913682568857261754088746553923070547372162291917940310315395401427416906841838921771042291599477497237869723233636578707888291424040994801642075836403802610478032477054755135500",
		chest: []byte{
			0xf4, 0x8e, 0xf8, 0xb2, 0xdb, 0x95, 0xfd, 0x9f, 0x9c, 0xb7, 0xb2, 0xdd, 0xc1, 0xd4, 0xce, 0x90,
			0xe7, 0x98, 0x9b, 0xd9, 0xda, 0xfa, 0x8e, 0xb6, 0xa5, 0x80, 0xbc, 0xc1, 0x97, 0xb2, 0xf5, 0xeb,
			0xdf, 0xfc, 0x9e, 0xcc, 0xf8, 0xa2, 0xf5, 0xf0, 0xbc, 0xf7, 0x81, 0xcd, 0xf1, 0xb5, 0xed, 0x83,
			0xee, 0x93, 0x83, 0xcf, 0xde, 0xba, 0xf9, 0xf4, 0xb5, 0x89, 0x8b, 0xd2, 0xf5, 0x98, 0x9c, 0xe7,
			0xe9, 0x81, 0x82, 0xcb, 0xa3, 0x92, 0xc7, 0xb4, 0xf4, 0x98, 0xcf, 0xa1, 0xdd, 0xc9, 0xd4, 0xe6,
			0xaa, 0x9b, 0x8f, 0xea, 0xc3, 0xc2, 0xb2, 0xbf, 0xdc, 0x87, 0x9d, 0xd2, 0x9e, 0x85, 0x9e, 0xa8,
			0x99, 0xfe, 0xdf, 0xf9, 0x9a, 0xbc, 0x90, 0xec, 0xbf, 0xca, 0x8c, 0x89, 0xdf, 0xbd, 0xcf, 0xc8,
			0xba, 0x8d, 0xb8, 0xea, 0xb2, 0x8b, 0xd0, 0xa3, 0x91, 0xe3, 0xd7, 0xc4, 0xa0, 0xc3, 0xc3, 0xb7,
			0x82, 0xfd, 0x95, 0xcc, 0xec, 0x84, 0xda, 0xfb, 0x8b, 0xdb, 0xec, 0xe6, 0xa9, 0xd8, 0xdf, 0xd9,
			0x89, 0xf9, 0xe6, 0xec, 0xef, 0xd4, 0xde, 0xc0, 0xa2, 0xf2, 0x8f, 0x81, 0xc7, 0xe8, 0xda, 0xbf,
			0xba, 0xa3, 0x8a, 0xe0, 0xbc, 0xca, 0xdc, 0xf5, 0xcc, 0x96, 0x91, 0xda, 0xa7, 0xcd, 0xf5, 0x89,
			0xf3, 0xd2, 0xf0, 0xda, 0x90, 0xb3, 0xa9, 0x8b, 0xea, 0xd3, 0xe1, 0xc1, 0xbf, 0xea, 0xc0, 0xa0,
			0xd3, 0xee, 0x94, 0xa2, 0xfa, 0x91, 0xdb, 0xdc, 0xf2, 0x9a, 0x9f, 0xdb, 0xef, 0xf4, 0xf3, 0xa5,
			0xee, 0xd2, 0xc7, 0x95, 0xcf, 0x89, 0xb6, 0x9a, 0xf3, 0xc5, 0xd8, 0xf3, 0xbf, 0x85, 0xb1, 0xb5,
			0xe1, 0x92, 0xc1, 0xc4, 0xe9, 0x8c, 0xd8, 0xdb, 0xe5, 0xda, 0x89, 0xdc, 0x8d, 0x95, 0xfa, 0xaf,
			0x93, 0xa7, 0xf0, 0x84, 0xff, 0xa2, 0xf9, 0xd8, 0xc3, 0xe9, 0xa4, 0xdb, 0xfb, 0xfc, 0xfc, 0xc4,
			0xf7, 0xb5, 0xcb, 0xf3, 0xa3, 0xf7, 0x88, 0xcc, 0x9b, 0xdd, 0xa2, 0xdd, 0xd3, 0x8b, 0xa4, 0x82,
			0xca, 0xb0, 0xa0, 0xe3, 0x8b, 0xf3, 0xf6, 0xbc, 0xd7, 0x84, 0xa2, 0x86, 0xd6, 0xf3, 0xb4, 0xbb,
			0xae, 0x85, 0xd2, 0xad, 0x08, 0x7e, 0x8c, 0x0b, 0x06, 0x18, 0x21, 0x4f, 0x10, 0x07, 0xad, 0x7a,
			0xec, 0xdd, 0x1f, 0x62, 0x80, 0xef, 0xac, 0xae, 0xf1, 0x90, 0x7a, 0x24, 0x39, 0x00, 0x00, 0x00,
			0x17, 0xcc, 0x6b, 0xce, 0x13, 0xc4, 0x35, 0x22, 0x32, 0x9d, 0xd0, 0x20, 0xcb, 0xee, 0x4c, 0x6c,
			0x7f, 0x57, 0x6d, 0xbc, 0x0b, 0x33, 0x9d, 0xdb,
		},
		chestKey: []byte{
			0xc0, 0xd4, 0xa5, 0x87, 0xa9, 0xc3, 0xc2, 0xa1, 0xcd, 0xcd, 0xba, 0xa3, 0x9d, 0x85, 0xfa, 0xa1,
			0xf0, 0xb8, 0xb6, 0xa0, 0xa9, 0xcc, 0x94, 0x95, 0xd4, 0xfc, 0x97, 0xa7, 0xfe, 0xe7, 0xea, 0xdc,
			0x9c, 0x83, 0xba, 0xd5, 0xeb, 0xfd, 0xd7, 0x9b, 0xa5, 0xd6, 0xbf, 0xbb, 0xe6, 0xda, 0xf0, 0x82,
			0xc5, 0xfe, 0xd9, 0xcb, 0xa4, 0xd8, 0xf8, 0xe6, 0xdf, 0xa2, 0x93, 0xc8, 0xa8, 0xfe, 0xb4, 0xca,
			0xb3, 0xd1, 0x83, 0xce, 0xc0, 0xb0, 0xa3, 0xda, 0xe6, 0xc9, 0x85, 0xde, 0xdb, 0xce, 0xbe, 0xd8,
			0xb0, 0x9a, 0xd5, 0x91, 0xc2, 0xbb, 0xe1, 0xd3, 0xc3, 0xf5, 0xbe, 0x9d, 0xcf, 0xfd, 0xc7, 0xd1,
			0xe7, 0x87, 0xd6, 0x9f, 0x9f, 0xef, 0xf0, 0xcd, 0xe3, 0xdc, 0xd3, 0xc4, 0xd7, 0x86, 0x93, 0xc0,
			0xb6, 0xcc, 0xba, 0xd9, 0xf0, 0xb5, 0xd1, 0xfa, 0xb1, 0xcf, 0xdc, 0x91, 0x96, 0x87, 0xec, 0xe2,
			0x99, 0xdd, 0x92, 0xc8, 0x8c, 0xdc, 0xb9, 0xb5, 0xd0, 0xf6, 0xb7, 0xc0, 0x93, 0xc4, 0x80, 0x95,
			0xb0, 0x86, 0xf2, 0x95, 0x86, 0xd4, 0xb0, 0x96, 0xc9, 0xa2, 0xbd, 0xa1, 0xf6, 0xec, 0xae, 0xb1,
			0xcb, 0xb5, 0xf5, 0xc3, 0xc7, 0xf9, 0xfc, 0x9f, 0xaa, 0xf0, 0x9a, 0xde, 0x90, 0xdd, 0xd7, 0x82,
			0xfa, 0xdc, 0xaa, 0xd2, 0xcc, 0x94, 0xa7, 0xa6, 0xc5, 0x9c, 0xf8, 0xf8, 0xce, 0x80, 0xa2, 0xa1,
			0xec, 0xae, 0xdc, 0x88, 0x9a, 0xf6, 0x9d, 0xd4, 0x94, 0xc0, 0x81, 0xd4, 0xf1, 0x9c, 0xf4, 0xec,
			0xa2, 0xf0, 0xc0, 0x99, 0x8d, 0x82, 0x8e, 0xdc, 0xd1, 0xa0, 0xa2, 0xe2, 0xd4, 0xdf, 0x9d, 0xcd,
			0xcc, 0xd4, 0xd7, 0xf1, 0x99, 0xd6, 0xda, 0xb2, 0x83, 0x83, 0xed, 0xf5, 0x9d, 0xfe, 0xa7, 0xac,
			0xc7, 0x91, 0xad, 0x9b, 0xa1, 0xcb, 0x91, 0xab, 0xdd, 0xae, 0x9d, 0x99, 0xd8, 0xb1, 0xc2, 0xda,
			0xd9, 0xeb, 0x90, 0xb4, 0x95, 0x8d, 0x97, 0x8f, 0xaa, 0xf7, 0xd9, 0xc6, 0xdb, 0xf8, 0x88, 0xfe,
			0xf2, 0xe5, 0xbe, 0xd2, 0xa5, 0x9e, 0x82, 0xe6, 0x8f, 0x8f, 0xb2, 0xb7, 0xa4, 0xc9, 0xdd, 0xc5,
			0xa5, 0xb1, 0xd2, 0x97, 0x01, 0x83, 0x92, 0xe2, 0xd4, 0xb4, 0xde, 0xc8, 0x93, 0xf2, 0xa6, 0xb4,
			0xc1, 0x89, 0xf1, 0x97, 0xf3, 0xc8, 0xba, 0xce, 0xc9, 0xe8, 0xe7, 0xc9, 0xca, 0xf4, 0xab, 0xa6,
			0xf0, 0xb4, 0xd0, 0x96, 0xf4, 0xdf, 0x94, 0xfe, 0xd4, 0xba, 0xfe, 0x91, 0xc8, 0x8a, 0xde, 0x83,
			0x8f, 0xe9, 0xb7, 0xb4, 0x95, 0xa2, 0xec, 0xd3, 0xc6, 0xd3, 0xf4, 0x93, 0xd3, 0x8c, 0x88, 0xab,
			0xd2, 0x98, 0x9d, 0xbe, 0xb9, 0x86, 0xc7, 0xd0, 0xcc, 0xfb, 0xa0, 0xd3, 0xb8, 0xfb, 0xdc, 0xfd,
			0xff, 0x88, 0xcc, 0x99, 0xcf, 0xc8, 0xf1, 0xcd, 0xd1, 0xdc, 0xf4, 0x89, 0xbd, 0xd6, 0x89, 0x96,
			0x89, 0xd1, 0xbe, 0xbc, 0xed, 0xa1, 0x97, 0xf0, 0x9c, 0xfc, 0xb4, 0x97, 0xa8, 0xce, 0xda, 0xdc,
			0x9f, 0xda, 0xaf, 0xb4, 0xb2, 0xe4, 0xad, 0xea, 0x98, 0xc9, 0x9f, 0x96, 0xac, 0xb4, 0xcf, 0x9e,
			0xa8, 0x9f, 0xbe, 0xd0, 0xb4, 0xee, 0xf4, 0xeb, 0xb8, 0xeb, 0x94, 0xc2, 0xf1, 0xee, 0xec, 0xe1,
			0xa1, 0xea, 0xd0, 0x8d, 0x93, 0xb7, 0xda, 0xa2, 0xdb, 0xd1, 0x92, 0x8c, 0xe3, 0xbf, 0x9f, 0xf6,
			0xa8, 0xfa, 0xef, 0x9e, 0xac, 0xd5, 0xc0, 0xf9, 0xe4, 0x98, 0xeb, 0xfa, 0xc5, 0xf9, 0x82, 0x93,
			0xa9, 0xcf, 0xed, 0xef, 0xee, 0xb0, 0xa7, 0xff, 0x8b, 0xcb, 0xae, 0xaa, 0xec, 0xa6, 0xc0, 0xda,
			0xee, 0xdc, 0x8b, 0xbb, 0x88, 0x96, 0xec, 0x81, 0xad, 0xcc, 0x91, 0xa4, 0xc3, 0x9d, 0x96, 0x92,
			0xd9, 0xa0, 0xf8, 0xc9, 0x86, 0xb0, 0xc8, 0x84, 0xcf, 0xff, 0xc6, 0xe9, 0xe8, 0xa1, 0xb9, 0x82,
			0x94, 0xe4, 0xe6, 0xd6, 0xb7, 0xa2, 0xba, 0xe7, 0xf5, 0xd3, 0xc6, 0xa9, 0xbd, 0xf6, 0xfb, 0xad,
			0xe9, 0xf3, 0xe0, 0xef, 0x80, 0xa1, 0x80, 0xc3, 0x8c, 0xcf, 0xb3, 0xca, 0x8a, 0x95, 0x83, 0xe8,
			0x99, 0xd5, 0xc8, 0x9c, 0xfe, 0xc7, 0xc3, 0xcd, 0x94, 0xe9, 0xe4, 0xbf, 0xcf, 0x86, 0x8a, 0x8e,
			0xa6, 0xdc, 0xef, 0xd3, 0xe8, 0xdb, 0xa4, 0xb5, 0xcd, 0xce, 0xec, 0xd4, 0xf2, 0xf4, 0xde, 0xfa,
			0xf6, 0xe9, 0xf0, 0xb2, 0xb2, 0xda, 0xb1, 0x8c, 0xa6, 0x01, 0x8c, 0xc0, 0xff, 0xff, 0xf2, 0x8f,
			0xfa, 0xdb, 0x85, 0xc0, 0xb7, 0x87, 0xe4, 0xf6, 0x85, 0xd0, 0xa5, 0x82, 0xe5, 0xec, 0xe8, 0xe7,
			0xa4, 0xeb, 0x9f, 0xda, 0xcc, 0xd0, 0xaa, 0xe1, 0xe2, 0x92, 0xe9, 0xd4, 0xe4, 0xc7, 0xd9, 0xf2,
			0xa5, 0xed, 0xa0, 0xe7, 0xe8, 0xbe, 0xf8, 0x82, 0x84, 0xf4, 0xc9, 0xe7, 0xcd, 0xeb, 0xe3, 0x94,
			0xe8, 0xf6, 0xb4, 0xc7, 0xd0, 0xca, 0xdf, 0xd4, 0x85, 0xb0, 0xa2, 0x93, 0x99, 0x8c, 0xaf, 0xbb,
			0xe6, 0xe5, 0xd4, 0xfd, 0xcd, 0xa5, 0xc1, 0x8e, 0xff, 0xd7, 0xd2, 0xdd, 0x81, 0xa4, 0xe3, 0x84,
			0xbb, 0xc3, 0xdc, 0xe7, 0xaf, 0xa1, 0xf6, 0xa6, 0x9e, 0xc0, 0xe0, 0xb7, 0xdd, 0xcb, 0xb3, 0xbf,
			0xbf, 0xb9, 0x95, 0xa2, 0xad, 0x8c, 0xfc, 0x8b, 0xb4, 0x8f, 0xe1, 0xc0, 0xa7, 0xc9, 0x92, 0xcb,
			0xb7, 0x88, 0xfd, 0x93, 0xc9, 0xa6, 0xea, 0xc4, 0xab, 0x8d, 0xe9, 0xf4, 0xec, 0x98, 0xb0, 0xd1,
			0x80, 0x83, 0xcb, 0x94, 0xbd, 0xa2, 0xf6, 0x96, 0xd0, 0xee, 0x8f, 0xf3, 0xe6, 0xd1, 0xe7, 0xb6,
			0x8c, 0xa1, 0xf8, 0xdf, 0xee, 0xa1, 0xd1, 0xaf, 0xbd, 0x9d, 0xfa, 0xa4, 0xf0, 0xe6, 0xeb, 0xc6,
			0xb5, 0xaa, 0xd0, 0xf5, 0x8e, 0xec, 0x89, 0x97, 0x89, 0xe6, 0xb6, 0xae, 0xf2, 0xf9, 0x9f, 0xc1,
			0x97, 0xcc, 0xd5, 0xb3, 0x8f, 0xfd, 0xd4, 0xe9, 0xc4, 0xa2, 0xeb, 0xd2, 0x83, 0xc1, 0xc5, 0xbd,
			0xe4, 0xc3, 0x9a, 0xcb, 0xbe, 0x99, 0xaa, 0xd0, 0xbc, 0xcc, 0x94, 0xe3, 0xc8, 0xc4, 0x82, 0xbd,
			0xdc, 0xa2, 0xb8, 0x94, 0xa3, 0xeb, 0xfa, 0xf5, 0xaf, 0xb3, 0x92, 0xc9, 0xff, 0x94, 0x89, 0xbd,
			0xbd, 0xc5, 0x91, 0xdf, 0xec, 0xcd, 0xed, 0xdf, 0xd2, 0xaf, 0xcd, 0xc9, 0xde, 0xb5, 0xe8, 0xdd,
			0x84, 0xa4, 0xba, 0xaa, 0xa3, 0xa9, 0x8e, 0xc3, 0xaa, 0xd0, 0x8e, 0xe1, 0x80, 0x97, 0xd1, 0xf9,
			0x88, 0x9b, 0xd2, 0xb9, 0xde, 0x9f, 0x8e, 0xc0, 0xfb, 0xb3, 0xdd, 0xd8, 0xd6, 0xe9, 0xe1, 0x98,
			0xe8, 0xe4, 0xb9, 0x8e, 0xca, 0xe1, 0xed, 0xc2, 0xc3, 0xed, 0xcb, 0x90, 0x8a, 0xd9, 0x08, 0x80,
			0xde, 0xb7, 0x88, 0xb4, 0xf6, 0xd7, 0xd3, 0xec, 0xa7, 0xa7, 0xb7, 0xd9, 0x82, 0xe9, 0xd9, 0x9c,
			0x5e,
		},
		payload: []byte("payload"),
	},
}

func TestVec(t *testing.T) {
	for _, v := range vectors {
		lockedValue, _ := tz.ParseBigUint(v.lockedValue, 10)
		unlockedValue, _ := tz.ParseBigUint(v.unlockedValue, 10)
		vdfProof, _ := tz.ParseBigUint(v.vdfProof, 10)
		tuple := Timelock{
			LockedValue:   lockedValue,
			UnlockedValue: unlockedValue,
			VDFProof:      vdfProof,
		}
		locked, proof, err := tuple.NewProof(rand.Reader, v.time, nil)
		require.NoError(t, err)
		assert.True(t, Verify(locked, proof, v.time, nil))

		var (
			chest    Chest
			chestKey ChestKey
		)
		_, err = encoding.Decode(v.chest, &chest)
		require.NoError(t, err)
		_, err = encoding.Decode(v.chestKey, &chestKey)
		require.NoError(t, err)
		assert.True(t, Verify(chest.LockedValue.Int(), &chestKey, v.time, nil))
		pl, ok, err := chest.Open(&chestKey, v.time, nil)
		require.NoError(t, err)
		assert.True(t, ok)
		assert.Equal(t, v.payload, pl)
	}
}

func TestLowLevel(t *testing.T) {
	time := 10_000

	timelockPrecomputedTuple, err := PrecomputeTimelock(rand.Reader, time, nil)
	require.NoError(t, err)

	locked, proof, err := timelockPrecomputedTuple.NewProof(rand.Reader, time, nil)
	require.NoError(t, err)
	require.True(t, Verify(locked, proof, time, nil))

	proof2 := UnlockAndProve(time, locked, nil)
	assert.True(t, Verify(locked, proof2, time, nil))

	symKey1 := proof.SymmetricKey(nil)
	symKey2 := proof2.SymmetricKey(nil)
	assert.Equal(t, symKey1, symKey2)

	message := []byte("rzersef")
	c, err := Encrypt(rand.Reader, &symKey2, message)
	require.NoError(t, err)

	d, ok := Decrypt(&symKey2, c)
	assert.True(t, ok)
	assert.Equal(t, message, d)
}

func TestChest(t *testing.T) {
	time := 10_000
	payload := []byte("zrethgfdsq")
	chest, chestKey1, err := NewChest(rand.Reader, payload, time, nil)
	require.NoError(t, err)
	chestKey2, err := chest.NewKey(time, nil)
	require.NoError(t, err)

	op1, ok, err := chest.Open(chestKey1, time, nil)
	require.NoError(t, err)
	assert.True(t, ok)

	op2, ok, err := chest.Open(chestKey2, time, nil)
	require.NoError(t, err)
	assert.True(t, ok)

	assert.Equal(t, payload, op1)
	assert.Equal(t, op1, op2)
}
